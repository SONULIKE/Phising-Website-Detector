# Load and preprocess the data
phishing_data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(phishing_data)[colnames(phishing_data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
phishing_data$Class <- as.factor(phishing_data$Class)
# Verify class distribution
table(phishing_data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(phishing_data$Class, p = 0.8, list = FALSE)
train_data <- phishing_data[trainIndex, ]
test_data <- phishing_data[-trainIndex, ]
# Train a logistic regression model
model <- glm(Class ~ ., family = binomial, data = train_data)
# Summarize model
summary(model)
# Make predictions
predictions <- predict(model, newdata = test_data, type = "response")
# Convert probabilities to class labels
predicted_class <- ifelse(predictions > 0.5, 1, 0)
predicted_class <- factor(predicted_class, levels = levels(test_data$Class))
# Evaluate model performance
conf_matrix <- confusionMatrix(predicted_class, test_data$Class)
print(conf_matrix)
# Assuming model is your trained logistic regression model
saveRDS(model, file = "phishing_model.rds")
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(Class ~ ., family = binomial, data = train_data)
# Save trained model
saveRDS(model, "phishing_model.rds")
# Print confirmation
print("✅ Model training complete and saved!")
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(Class ~ ., family = binomial, data = train_data)
# Save trained model
saveRDS(model, "phishing_model.rds")
# Print confirmation
print("✅ Model training complete and saved!")
# Set working directory
setwd("C:\coding\phising_guard")  # Change this to your actual directory
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(Class ~ ., family = binomial, data = train_data)
# Save trained model
saveRDS(model, "phishing_model.rds")
# Print confirmation
print("✅ Model training complete and saved!")
summary(model)
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Train logistic regression model
model <- lm(CLASS_LABEL ~ . - id, data = training_data)
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Train logistic regression model
model <- lm(CLASS_LABEL ~ . - id, data = train_data)
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(Class ~ . - id, family = binomial, data = train_data)
# Save trained model
saveRDS(model, "phishing_model.rds")
# Print confirmation
print("✅ Model training complete and saved!")
summary()
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(Class ~ . - id, family = binomial, data = train_data)
# Save trained model
saveRDS(model, "phishing_model.rds")
# Print confirmation
print("✅ Model training complete and saved!")
summary(model)
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Train logistic regression model
model <- glm(Class ~ . , family = binomial, data = train_data)
# Save trained model
saveRDS(model, "phishing_model.rds")
# Print confirmation
print("✅ Model training complete and saved!")
summary(model)
getwd()
table(train_data$label)  # or whatever your label column is
# Set working directory
setwd("C:/coding/phising_guard")  # Change this to your actual directory
# Load necessary libraries
library(caret)
library(pROC)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename target variable
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
# Convert target variable to factor
data$Class <- as.factor(data$Class)
# Split data into training (80%) and testing (20%)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
table(train_data$label)
# # Set working directory
# setwd("C:/coding/phising_guard")  # Change this to your actual directory
#
# # Load necessary libraries
# library(caret)
# library(pROC)
#
# # Load dataset
# data <- read.csv("Phishing_Legitimate_full.csv")
#
# # Rename target variable
# colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
#
# # Convert target variable to factor
# data$Class <- as.factor(data$Class)
#
# # Split data into training (80%) and testing (20%)
# set.seed(42)
# trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
# train_data <- data[trainIndex, ]
# test_data <- data[-trainIndex, ]
# table(train_data$label)
# # Train logistic regression model
#
# model <- glm(Class ~ . , family = binomial, data = train_data)
# #
# # # Save trained model
# # saveRDS(model, "phishing_model.rds")
#
# summary(model)
#
#
# predict(model, newdata = new_df, type = "response")
Great — your R code for training the logistic regression model looks solid at the core. Below, I’ll show an **improved version** of your script with:
# # Set working directory
# setwd("C:/coding/phising_guard")  # Change this to your actual directory
#
# # Load necessary libraries
# library(caret)
# library(pROC)
#
# # Load dataset
# data <- read.csv("Phishing_Legitimate_full.csv")
#
# # Rename target variable
# colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
#
# # Convert target variable to factor
# data$Class <- as.factor(data$Class)
#
# # Split data into training (80%) and testing (20%)
# set.seed(42)
# trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
# train_data <- data[trainIndex, ]
# test_data <- data[-trainIndex, ]
# table(train_data$label)
# # Train logistic regression model
#
# model <- glm(Class ~ . , family = binomial, data = train_data)
# #
# # # Save trained model
# # saveRDS(model, "phishing_model.rds")
#
# summary(model)
#
#
# predict(model, newdata = new_df, type = "response")
# Set working directory
setwd("C:/coding/phising_guard")  # Change to your actual path
# Load libraries
library(caret)
library(pROC)
library(dplyr)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename and format target
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
data$Class <- as.factor(data$Class)
# Check class balance
cat("Class balance in dataset:\n")
print(table(data$Class))
print(prop.table(table(data$Class)))
# Handle imbalance (optional: upsampling)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Optional upsampling
cat("Upsampling...\n")
train_bal <- upSample(x = train_data[, -ncol(train_data)],
y = train_data$Class,
yname = "Class")
# Scale numeric features
cat("Scaling features...\n")
preProc <- preProcess(train_bal[, -ncol(train_bal)], method = c("center", "scale"))
train_scaled <- predict(preProc, train_bal[, -ncol(train_bal)])
test_scaled <- predict(preProc, test_data[, -ncol(test_data)])
train_final <- cbind(train_scaled, Class = train_bal$Class)
test_final <- cbind(test_scaled, Class = test_data$Class)
# Train logistic regression model
cat("Training model...\n")
model <- glm(Class ~ ., data = train_final, family = binomial)
# Save model and preProcess for use in Flask
saveRDS(model, "phishing_model.rds")
saveRDS(preProc, "preprocess_model.rds")
# Evaluate on test set
cat("Evaluating model...\n")
probs <- predict(model, newdata = test_final, type = "response")
preds <- ifelse(probs > 0.5, "1", "0")
confusion <- confusionMatrix(as.factor(preds), test_final$Class)
auc <- roc(test_final$Class, probs)
# Print metrics
print(confusion)
cat("AUC:", auc$auc, "\n")
---
Want help applying the same `center` + `scale` preprocessing in your Flask app using Python too?
# # Set working directory
# setwd("C:/coding/phising_guard")  # Change this to your actual directory
#
# # Load necessary libraries
# library(caret)
# library(pROC)
#
# # Load dataset
# data <- read.csv("Phishing_Legitimate_full.csv")
#
# # Rename target variable
# colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
#
# # Convert target variable to factor
# data$Class <- as.factor(data$Class)
#
# # Split data into training (80%) and testing (20%)
# set.seed(42)
# trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
# train_data <- data[trainIndex, ]
# test_data <- data[-trainIndex, ]
# table(train_data$label)
# # Train logistic regression model
#
# model <- glm(Class ~ . , family = binomial, data = train_data)
# #
# # # Save trained model
# # saveRDS(model, "phishing_model.rds")
#
# summary(model)
#
#
# predict(model, newdata = new_df, type = "response")
# Set working directory
setwd("C:/coding/phising_guard")  # Change to your actual path
# Load libraries
library(caret)
library(pROC)
library(dplyr)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename and format target
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
data$Class <- as.factor(data$Class)
# Check class balance
cat("Class balance in dataset:\n")
print(table(data$Class))
print(prop.table(table(data$Class)))
# Handle imbalance (optional: upsampling)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Optional upsampling
cat("Upsampling...\n")
train_bal <- upSample(x = train_data[, -ncol(train_data)],
y = train_data$Class,
yname = "Class")
# Scale numeric features
cat("Scaling features...\n")
preProc <- preProcess(train_bal[, -ncol(train_bal)], method = c("center", "scale"))
train_scaled <- predict(preProc, train_bal[, -ncol(train_bal)])
test_scaled <- predict(preProc, test_data[, -ncol(test_data)])
train_final <- cbind(train_scaled, Class = train_bal$Class)
test_final <- cbind(test_scaled, Class = test_data$Class)
# Train logistic regression model
cat("Training model...\n")
model <- glm(Class ~ ., data = train_final, family = binomial)
# Save model and preProcess for use in Flask
saveRDS(model, "phishing_model.rds")
saveRDS(preProc, "preprocess_model.rds")
# Evaluate on test set
cat("Evaluating model...\n")
probs <- predict(model, newdata = test_final, type = "response")
preds <- ifelse(probs > 0.5, "1", "0")
confusion <- confusionMatrix(as.factor(preds), test_final$Class)
auc <- roc(test_final$Class, probs)
# Print metrics
print(confusion)
cat("AUC:", auc$auc, "\n")
---
Want help applying the same `center` + `scale` preprocessing in your Flask app using Python too?
# # Set working directory
# setwd("C:/coding/phising_guard")  # Change this to your actual directory
#
# # Load necessary libraries
# library(caret)
# library(pROC)
#
# # Load dataset
# data <- read.csv("Phishing_Legitimate_full.csv")
#
# # Rename target variable
# colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
#
# # Convert target variable to factor
# data$Class <- as.factor(data$Class)
#
# # Split data into training (80%) and testing (20%)
# set.seed(42)
# trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
# train_data <- data[trainIndex, ]
# test_data <- data[-trainIndex, ]
# table(train_data$label)
# # Train logistic regression model
#
# model <- glm(Class ~ . , family = binomial, data = train_data)
# #
# # # Save trained model
# # saveRDS(model, "phishing_model.rds")
#
# summary(model)
#
#
# predict(model, newdata = new_df, type = "response")
# Set working directory
setwd("C:/coding/phising_guard")  # Change to your actual path
# Load libraries
library(caret)
library(pROC)
library(dplyr)
# Load dataset
data <- read.csv("Phishing_Legitimate_full.csv")
# Rename and format target
colnames(data)[colnames(data) == "CLASS_LABEL"] <- "Class"
data$Class <- as.factor(data$Class)
# Check class balance
cat("Class balance in dataset:\n")
print(table(data$Class))
print(prop.table(table(data$Class)))
# Handle imbalance (optional: upsampling)
set.seed(42)
trainIndex <- createDataPartition(data$Class, p = 0.8, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
# Optional upsampling
cat("Upsampling...\n")
train_bal <- upSample(x = train_data[, -ncol(train_data)],
y = train_data$Class,
yname = "Class")
# Scale numeric features
cat("Scaling features...\n")
preProc <- preProcess(train_bal[, -ncol(train_bal)], method = c("center", "scale"))
train_scaled <- predict(preProc, train_bal[, -ncol(train_bal)])
test_scaled <- predict(preProc, test_data[, -ncol(test_data)])
train_final <- cbind(train_scaled, Class = train_bal$Class)
test_final <- cbind(test_scaled, Class = test_data$Class)
# Train logistic regression model
cat("Training model...\n")
model <- glm(Class ~ ., data = train_final, family = binomial)
# Save model and preProcess for use in Flask
saveRDS(model, "phishing_model.rds")
saveRDS(preProc, "preprocess_model.rds")
# Evaluate on test set
cat("Evaluating model...\n")
probs <- predict(model, newdata = test_final, type = "response")
preds <- ifelse(probs > 0.5, "1", "0")
confusion <- confusionMatrix(as.factor(preds), test_final$Class)
auc <- roc(test_final$Class, probs)
# Print metrics
print(confusion)
cat("AUC:", auc$auc, "\n")
library(readr)
legit_test_data <- read_csv("legit_test_data.csv")
View(legit_test_data)
new_test<-read.csv("legit_test_data.csv")
p<- predict(model, newdata = new_test, type = "response")
new_test<-read.csv("legit_test_data.csv")
p<- predict(model, newdata = new_test, type = "response")
